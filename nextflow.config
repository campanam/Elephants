// Forked from Kauai pipeline (version 2) on 20 Jan 2023

manifest {

	name = 'Elephant Genomics'
	author = 'Michael G. Campana'
	homePage = 'https://github.com/campanam/Elephants'
	description = 'Pipeline to analyze elephant genomics'
	mainScript = 'elephants.nf'
	version = '0.1.0'
	nextflowVersion = '>=20.10.0'

}

params {

	outdir = "$baseDir/kauai_results_v2" // Output directory
	refseq = "$baseDir/hofi_genome_genbank_v2_masked.fa" // House finch genome reference sequence
	mtDNA = "$baseDir/hofi_mt.fasta" // Mitochondrial reference sequence file
	mtDNA_ID = 'NC_025610.1' // Name of mtDNA sequence in reference sequence file
	samples = "$baseDir/kauai_libraries_v2.csv" // CSV detailing sequencing libraries and needed analyses
	reads = "$baseDir/RawData/" // Path to reads
	min_uniq_mapped = 10 // Minimum number of unique mapped reads to retain an alignment file
	aDNA_trimmed_bases = 2 // Number of bases to trim from 5' and 3' termini to account for deamination damage
	
	bin = "$baseDir/bin/" // Directory for binaries used in pipeline
	/* Versions in current pipeline:

	BCFtools 1.13


	BEDtools 2.30.0
	VCFtools 0.1.16 */
	
	java_options = "" // Execution options for java jar files (Java 1.8)
	
}

profiles {
	hydra {
	
		// Default clusterOptions for picard, vcftools and java commands
		params.java_options = '-D64 -Dserver -XX:MaxHeapSize=14G' // Options for Java 1.8
		default_options = '-l mres=8G,h_data=8G,h_vmem=8G,himem -S /bin/bash' // Default options for computation steps
	
		executor {
	
			name = 'sge'
			exitReadTimeout = '10min'
	
		}
	
		process {
			maxForks = 1000 // Prevent job submission overflow
			errorStrategy = 'finish'
			maxRetries = 1
			queue = 'sThM.q'
			clusterOptions = default_options
			
			withName: buildRef { 
				clusterOptions = '-l mres=16G,h_data=16G,h_vmem=16G,himem -S /bin/bash'
				queue = 'mThM.q'
				storeDir = 'chkpnt' // Prevent remaking completed files
			}
			withName: buildMitoRef {
				clusterOptions = '-l mres=1G,h_data=1G,h_vmem=1G -S /bin/bash'
				queue = 'sThC.q'
				storeDir = 'chkpnt' // Prevent remaking completed files
			}
			withName: 'alignMitoSeqs|alignSeqs' { 
				queue = 'mThM.q'
				clusterOptions = "-l mres=8G,h_data=8G,h_vmem=8G,himem -pe mthread 16 -S /bin/bash"
				storeDir = 'chkpnt'
			}
			withName: 'buildRef|buildMitoRef|alignMitoSeqs|alignSeqs' {
				conda = 'bioconda::bwa=0.7.17 bioconda::samtools=1.16.1 conda-forge::libzlib=1.2.13'
			}
			withName: trimAdapters { 
				queue = 'mThM.q'
				storeDir = 'chkpnt' // Prevent remaking completed files
				conda = 'bioconda::adapterremoval=2.3.3 conda-forge::libzlib=1.2.13'
			}
			withName: 'leftAlignIndels|markDup|mergedLeftAlignIndels|mergedMarkDup' {
				cpus = 2
				penv = 'mthread'
				clusterOptions = '-l mres=16G,h_data=16G,h_vmem=16G,himem -S /bin/bash'
				queue = 'mThM.q'
				conda = 'bioconda::picard=2.27.4 bioconda::gatk4=4.3.0.0'
				storeDir = 'chkpnt' // Prevent remaking completed files
			}
			
			withName: identifyLowCoverageBAMs {
				// storeDir not available for stdout output, hence awkward reuse of storeDir directive below
				queue = 'sThC.q'
				clusterOptions = '-l mres=1G,h_data=1G,h_vmem=1G -S /bin/bash'
			}
			



			withName: 'flagStats' { 
				clusterOptions = "-l mres=2G,h_data=2G,h_vmem=2G,himem -pe mthread ${samtools_threads} -S /bin/bash"
				storeDir = 'chkpnt' // Prevent remaking completed files
			}

			
			
			
			
			withName: jointcallmtHaplotypes {
				module = [modules.ruby]
			}
			withName: 'alignSeqs|alignMitoSeqs|sortModern|mergeSampleBAM|mergedFlagStats|jointcallVariants|jointcallmtHaplotypes|filternuVar' {
				storeDir = 'chkpnt' // Prevent remaking completed files
			}
		}
	}
}
